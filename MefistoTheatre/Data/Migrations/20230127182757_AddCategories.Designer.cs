// <auto-generated />
using System;
using MefistoTheatre.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MefistoTheatre.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230127182757_AddCategories")]
    partial class AddCategories
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MefistoTheatre.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSuspended")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Joined")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PostCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c2dacaff-2873-4bba-b6fc-b21ba5cfa209",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "04c7cdd9-ba02-4318-b21a-f800e8159cc8",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@mefisto.com",
                            EmailConfirmed = true,
                            IsSuspended = false,
                            Joined = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@MEFISTO.COM",
                            NormalizedUserName = "ADMIN@MEFISTO.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEmHgc4F2fTfnd2C1deOh7kRJT2YbyQyi2WyMfRcQp6coS2DNOfXgBX3TCE/ye5yVA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8116edb7-1739-4ed1-babf-dd8cfb94ca2c",
                            TwoFactorEnabled = false,
                            UserName = "admin@mefisto.com"
                        },
                        new
                        {
                            Id = "ecc09658-0e74-4f54-95ef-2b3e471e00d4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "48ded2db-9ecd-41bb-a6db-53511b80da34",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "editor@mefisto.com",
                            EmailConfirmed = true,
                            IsSuspended = false,
                            Joined = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "EDITOR@MEFISTO.COM",
                            NormalizedUserName = "EDITOR@MEFISTO.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAED95dGSijMVqBz/VL86k75EyHnjmGM7+zcaPxep/wM56IwOK616FPFpJxC0iY+BUVw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "531a0e2e-c51f-4aed-b679-7ce9f81f648d",
                            TwoFactorEnabled = false,
                            UserName = "editor@mefisto.com"
                        },
                        new
                        {
                            Id = "c73a2d66-d8f4-4afc-b656-305519a22f0e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ec6560ba-f55a-451f-aeaf-6d9a6c8c7fb8",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "staff@mefisto.com",
                            EmailConfirmed = true,
                            IsSuspended = false,
                            Joined = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "STAFF@MEFISTO.COM",
                            NormalizedUserName = "STAFF@MEFISTO.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKr3PtI4IZF93HYnZ9oVfqJ/07psUjW35gu9r50Mt8Zghmlv7AUZSbVodvDFdvjFLQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "36a49a42-f9ae-404c-976b-e7ba0e2b22ab",
                            TwoFactorEnabled = false,
                            UserName = "staff@mefisto.com"
                        },
                        new
                        {
                            Id = "1f75cd59-fc01-4a37-a91f-1c58cbd72fc8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c710c4b8-9426-4bc9-8dd2-d2b24cbb09ad",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "basic@basic.com",
                            EmailConfirmed = true,
                            IsSuspended = false,
                            Joined = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "BASIC@BASIC.COM",
                            NormalizedUserName = "BASIC@BASIC.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJXvjU0TYv+Jq8oOGMDPQB5X+ag45xZ7fjVqLbGD097byOUQ0TEsivG5qny9rQiwAA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4ac1c8b9-b7a4-4719-8252-7b4614c3f1f0",
                            TwoFactorEnabled = false,
                            UserName = "basic@basic.com"
                        });
                });

            modelBuilder.Entity("MefistoTheatre.Models.Category", b =>
                {
                    b.Property<string>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = "5fbe6711-7e3f-427a-9201-81b54df6c996",
                            CategoryName = "Review"
                        },
                        new
                        {
                            CategoryId = "bff3288d-1a36-4ec7-bf3b-b055b38cea9f",
                            CategoryName = "Interview"
                        },
                        new
                        {
                            CategoryId = "e464f7e0-70cc-406e-8940-0536034f7de8",
                            CategoryName = "Announcements"
                        },
                        new
                        {
                            CategoryId = "5a8ab78e-d3cf-4260-8d8e-a9f492161dd1",
                            CategoryName = "Features"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "7085368f-3b0c-44cb-b427-a33353905e9a",
                            ConcurrencyStamp = "4bb4c272-2451-4e1d-ac50-e7759ac5e83b",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "0859d60b-f6f8-4720-b93f-5a0e64f173e9",
                            ConcurrencyStamp = "5b0be16f-8e6c-4762-a79f-0c53b743f760",
                            Name = "Editor",
                            NormalizedName = "EDITOR"
                        },
                        new
                        {
                            Id = "16509ca9-c900-41f0-82a1-1dc1e0d0498f",
                            ConcurrencyStamp = "bfd0ab21-d287-45ff-8321-85f899ae156a",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        },
                        new
                        {
                            Id = "8ae887b0-0d79-4434-b00d-9d76eb79de3e",
                            ConcurrencyStamp = "85e66b67-c6e0-4861-b543-cb658e806f37",
                            Name = "Basic",
                            NormalizedName = "BASIC"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "c2dacaff-2873-4bba-b6fc-b21ba5cfa209",
                            RoleId = "7085368f-3b0c-44cb-b427-a33353905e9a"
                        },
                        new
                        {
                            UserId = "ecc09658-0e74-4f54-95ef-2b3e471e00d4",
                            RoleId = "0859d60b-f6f8-4720-b93f-5a0e64f173e9"
                        },
                        new
                        {
                            UserId = "c73a2d66-d8f4-4afc-b656-305519a22f0e",
                            RoleId = "16509ca9-c900-41f0-82a1-1dc1e0d0498f"
                        },
                        new
                        {
                            UserId = "1f75cd59-fc01-4a37-a91f-1c58cbd72fc8",
                            RoleId = "8ae887b0-0d79-4434-b00d-9d76eb79de3e"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MefistoTheatre.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MefistoTheatre.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MefistoTheatre.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MefistoTheatre.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
